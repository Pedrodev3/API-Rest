package br.com.fiap.dao;

//O tipo "Connection" Ã© trazida a partir desse import
import java.sql.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;

import br.com.fiap.connection.Conexao;
import br.com.fiap.to.RegistroCandidatoTO;


public class RegistroCandidatoDAO implements IDAORegister {

	private Connection con = null;
	private RegistroCandidatoTO registroCandidato;

	public RegistroCandidatoDAO() {
		this.con = new Conexao().abrirConexao();
	}

	
	public String insertGeneral(Object obj) {
		registroCandidato = (RegistroCandidatoTO) obj;
		String sql = "INSERT INTO T_CHALL_REGISTRO_GERAL (ID_REGISTRO_GERAL, TP_USUARIO, NM_NOME_COMPLETO, DS_EMAIL, DS_SENHA, NR_CPF,)"
				+ "VALUES (SQ_T_CHALL_REGISTRO_GERAL.NEXTVAL,'C', ?, ?, ?, ?)";

		try {
			PreparedStatement ps = con.prepareStatement(sql);
			ps.setString(1, registroCandidato.getNomeCompleto());
			ps.setString(2, registroCandidato.getEmail());
			ps.setString(3, registroCandidato.getSenha());
			ps.setString(4, registroCandidato.getCpf());

			if (ps.executeUpdate() > 0) {
				return "Inserido com sucesso.";
			} else {
				return "Erro ao inserir.";
			}

		} catch (SQLException e) {
			return e.getMessage();
		}
	}
	
	
	public String insertUser(Object obj) {
		registroCandidato = (RegistroCandidatoTO) obj;
		String sql = "INSERT INTO T_CHALL_REGISTRO_CANDIDATO (ID_REGISTRO_GERAL, NR_RG, DT_NASCIMENTO, "
				+ "FL_SEXO_BIOLOGICO, TP_ESCOLARIDADE, DS_ESTADO_CIVIL, DS_CARGO, DS_FOTO) "
				+ "VALUES (SQ_T_CHALL_REGISTRO_GERAL.CURRVAL, ?, ?, ?, ?, ?, ?, ?)";
		
		PreparedStatement ps = null;
		
		try {
			// Transformando o LocalDate em String para mandar para o Banco de Dados
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
			String dataNascimento = registroCandidato.getDtNascimento().format(formatter);
			
			ps = con.prepareStatement(sql);
			ps.setString(1, registroCandidato.getNrRg());
			ps.setString(2, dataNascimento);
			ps.setString(3, registroCandidato.getFlSexoBiologico());
			ps.setString(4, registroCandidato.getTpEscolaridade());
			ps.setString(5, registroCandidato.getDsEstadoCivil());
			ps.setString(6, registroCandidato.getDsCargo());
			ps.setBlob(7, registroCandidato.getDsFoto());
			
			
			if (ps.executeUpdate() > 0) {
				con.close();
				return "Inserido com sucesso.";
			} else {
				con.close();
				return "Erro ao inserir.";
			}
		} catch (SQLException e) {
			return e.getMessage();
		}
	}

	
	public String updateGeneral(Object obj) {
		registroCandidato = (RegistroCandidatoTO) obj;
		String sql = "INSERT INTO T_CHALL_REGISTRO_GERAL SET NM_NOME_COMPLETO = ?, DS_EMAIL = ?, DS_SENHA = ?, NR_CPF = ? "
				+ "WHERE ID_REGISTRO_GERAL = ? AND AND TP_USUARIO = 'C'";

		try {
			// Transformando o LocalDate em String para mandar para o Banco de Dados
			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
			String dataNascimento = registroCandidato.getDtNascimento().format(formatter);

			PreparedStatement ps = con.prepareStatement(sql);
			ps.setString(1, registroCandidato.getNomeCompleto());
			ps.setString(2, registroCandidato.getEmail());
			ps.setString(3, registroCandidato.getSenha());
			ps.setString(4, registroCandidato.getCpf());
			ps.setInt(6, registroCandidato.getIdRegistroGeral());
			
			if (ps.executeUpdate() > 0) {
				return "Inserido com sucesso.";
			} else {
				return "Erro ao inserir.";
			}

		} catch (SQLException e) {
			return e.getMessage();
		}
	}
	
	
	public String updateUser(Object obj) {
        registroCandidato = (RegistroCandidatoTO) obj;
        String sql = "UPDATE T_CHALL_REGISTRO_CANDIDATO SET NR_RG = ?, DT_NASCIMENTO = ?, FL_SEXO_BIOLOGICO = ?, TP_ESCOLARIDADE = ?, "
        		+ "DS_ESTADO_CIVIL = ?, DS_CARGO = ?, DS_FOTO = ? WHERE ID_REGISTRO_GERAL = ? AND TP_USUARIO = 'C'";
        
        PreparedStatement ps = null;
        
        try {
        	// Transformando o LocalDate em String para mandar para o Banco de Dados
        	DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        	String dataNascimento = registroCandidato.getDtNascimento().format(formatter);
        	
            ps = con.prepareStatement(sql);
            ps.setString(1, registroCandidato.getNrRg());
			ps.setString(2, dataNascimento);
			ps.setString(3, registroCandidato.getFlSexoBiologico());
			ps.setString(4, registroCandidato.getTpEscolaridade());
			ps.setString(5, registroCandidato.getDsEstadoCivil());
			ps.setString(6, registroCandidato.getDsCargo());
			ps.setBlob(7, registroCandidato.getDsFoto());
			ps.setInt(8, registroCandidato.getIdRegistroGeral());
			
            if (ps.executeUpdate() > 0) {
            	con.close();
                return "Alterado com sucesso!";
            } else {
            	con.close();
                return "Erro ao alterar!";
            }
        } catch (SQLException e) {
            return e.getMessage();
        }
    }

	
	public String deleteUser(Integer id) {
		String sql = "DELETE FROM T_CHALL_REGISTRO_CANDIDATO WHERE ID_REGISTRO_GERAL = ?";
		
		PreparedStatement ps = null;
		
		try {
			ps = con.prepareStatement(sql);
			ps.setInt(1, id);
			if (ps.executeUpdate() > 0) {
				return "Excluido com sucesso!";
			} else {
				return "Erro ao excluir!";
			}
		} catch (SQLException e) {
			return e.getMessage();
		}
	}
	
	
	public String deleteGeneral(Integer id) {
		String sql = "DELETE FROM T_CHALL_REGISTRO_GERAL WHERE ID_REGISTRO_GERAL = ?";
		
		PreparedStatement ps = null;
		
		try {
			ps = con.prepareStatement(sql);
			ps.setInt(1, id);
			if (ps.executeUpdate() > 0) {
				con.close();
				return "Excluido com sucesso!";
			} else {
				con.close();
				return "Erro ao excluir!";
			}
		} catch (SQLException e) {
			return e.getMessage();
		}
	}

	
	public ArrayList<RegistroCandidatoTO> select(Integer id) {
		String sql = "SELECT RC.ID_REGISTRO_GERAL, RG.TP_USUARIO, RG.NM_NOME_COMPLETO," + "RG.DS_EMAIL, RG.NR_CPF,"
				+ "RC.NR_RG, RC.DT_NASCIMENTO, RC.FL_SEXO_BIOLOGICO, RC.TP_ESCOLARIDADE"
				+ "RC.DS_ESTADO_CIVIL, RC.DS_CARGO, RC.DS_FOTO"
				+ " FROM T_CHALL_REGISTRO_GERAL RG INNER JOIN T_CHALL_REGISTRO_CANDIDATO RC"
				+ " ON(RG.ID_REGISTRO_GERAL = RC.ID_REGISTRO_GERAL)" 
				+ " WHERE RC.ID_REGISTRO_GERAL = ?";

		ArrayList<RegistroCandidatoTO> resul = new ArrayList<RegistroCandidatoTO>();
		
		PreparedStatement ps = null;
		
		try {
			ps = con.prepareStatement(sql);
			ps.setInt(1, id);
			ResultSet rs = ps.executeQuery();
			if (rs.next()) {
				RegistroCandidatoTO rc = new RegistroCandidatoTO();
				rc.setIdRegistroGeral((rs.getInt(1)));
				rc.setTipoUsuario(rs.getString(2));
				rc.setNomeCompleto(rs.getString(3));
				rc.setEmail(rs.getString(4));
				rc.setCpf(rs.getString(5));
				rc.setNrRg(rs.getString(6));

				// Transformando o LocalDate em String para mandar para o Banco de Dados
				// DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
				LocalDate dataNascimento = LocalDate.parse(rs.getString(7));

				rc.setDtNascimento(dataNascimento);
				rc.setFlSexoBiologico(rs.getString(8));
				rc.setTpEscolaridade(rs.getString(9));
				rc.setDsEstadoCivil(rs.getString(10));
				rc.setDsCargo(rs.getString(11));
				rc.setDsFoto(rs.getBlob(12));
				resul.add(rc);

				con.close();
				return resul;
			} else {
				con.close();
				return null;
			}
		} catch (SQLException e) {
			return null;
		}
	}

	
	public ArrayList<RegistroCandidatoTO> selectAll() {

		String sql = "SELECT RC.ID_REGISTRO_GERAL, RG.TP_USUARIO, RG.NM_NOME_COMPLETO," + "RG.DS_EMAIL, RG.NR_CPF,"
				+ "RC.NR_RG, RC.DT_NASCIMENTO, RC.FL_SEXO_BIOLOGICO, RC.TP_ESCOLARIDADE"
				+ "RC.DS_ESTADO_CIVIL, RC.DS_CARGO, RC.DS_FOTO"
				+ " FROM T_CHALL_REGISTRO_GERAL RG INNER JOIN T_CHALL_REGISTRO_CANDIDATO RC"
				+ " ON(RG.ID_REGISTRO_GERAL = RC.ID_REGISTRO_GERAL)" 
				+ " ORDER BY ID_REGISTRO_GERAL";

		ArrayList<RegistroCandidatoTO> listaRegistroCandidato = new ArrayList<RegistroCandidatoTO>();
		
		PreparedStatement ps = null;
		
		try {
			ps = con.prepareStatement(sql);
			ResultSet rs = ps.executeQuery();

			if (rs != null) {
				while (rs.next()) {
					RegistroCandidatoTO rc = new RegistroCandidatoTO();
					rc.setIdRegistroGeral(rs.getInt(1));
					rc.setTipoUsuario(rs.getString(2));
					rc.setNomeCompleto(rs.getString(3));
					rc.setEmail(rs.getString(4));
					rc.setCpf(rs.getString(5));
					rc.setNrRg(rs.getString(6));

					// Transformando o LocalDate em String para mandar para o Banco de Dados
					// DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
					LocalDate dataNascimento = LocalDate.parse(rs.getString(7));

					rc.setDtNascimento(dataNascimento);
					rc.setFlSexoBiologico(rs.getString(8));
					rc.setTpEscolaridade(rs.getString(9));
					rc.setDsEstadoCivil(rs.getString(10));
					rc.setDsCargo(rs.getString(11));
					rc.setDsFoto(rs.getBlob(12));
					listaRegistroCandidato.add(rc);
				}
				con.close();
				return listaRegistroCandidato;
			} else {
				con.close();
				return null;
			}
		} catch (SQLException e) {
			return null;
		}
	}

}
